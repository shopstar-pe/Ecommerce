// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Payments.Persistence.Contexts;

namespace Payments.Persistence.Migrations
{
    [DbContext(typeof(PaymentsDbContext))]
    partial class PaymentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Payments")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Payments.Domain.Entities.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("AppSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 244, DateTimeKind.Utc).AddTicks(3450),
                            EntityStatus = 0,
                            Group = "Application",
                            IsReadOnly = true,
                            Name = "Version",
                            Value = "v1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 244, DateTimeKind.Utc).AddTicks(6570),
                            EntityStatus = 0,
                            Group = "Application",
                            IsReadOnly = true,
                            Name = "Owner",
                            Value = "admin"
                        });
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("IconLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidatorCardCodeMask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidatorCardCodeRegex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidatorCardMask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidatorCardRegex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValidatorCardUseBillingAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidatorCardUseCvv")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidatorCardUseExpirationDate")
                        .HasColumnType("bit");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("PaymentMethodGroupId");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(6050),
                            Description = "Visa",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Visa",
                            PaymentMethodGroupId = 1,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8190),
                            Description = "Master Card",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Master Card",
                            PaymentMethodGroupId = 1,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8240),
                            Description = "American Express",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "American Express",
                            PaymentMethodGroupId = 1,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 4,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8240),
                            Description = "Pago Efectivo",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Pago Efectivo",
                            PaymentMethodGroupId = 2,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 5,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8250),
                            Description = "Pago con Tarjeta Credito",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Pago con Tarjeta Credito",
                            PaymentMethodGroupId = 3,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 6,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8250),
                            Description = "Pago Efectivo",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Pago Efectivo",
                            PaymentMethodGroupId = 3,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 7,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8250),
                            Description = "Deposito en cuenta bancaria",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Deposito en cuenta bancaria",
                            PaymentMethodGroupId = 4,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        },
                        new
                        {
                            PaymentMethodId = 8,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(8250),
                            Description = "Confirmación Manual",
                            EntityStatus = 0,
                            IsPublished = false,
                            Name = "Confirmación Manual",
                            PaymentMethodGroupId = 5,
                            ValidatorCardUseBillingAddress = false,
                            ValidatorCardUseCvv = false,
                            ValidatorCardUseExpirationDate = false
                        });
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentMethodGroup", b =>
                {
                    b.Property<int>("PaymentMethodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentMethodGroupId");

                    b.ToTable("PaymentMethodGroup");

                    b.HasData(
                        new
                        {
                            PaymentMethodGroupId = 1,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(1050),
                            Description = "Tarjeta de Credito",
                            EntityStatus = 0,
                            Label = "Tarjeta de Credito",
                            Name = "CreditCard",
                            Order = 0
                        },
                        new
                        {
                            PaymentMethodGroupId = 2,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(4380),
                            Description = "Pago en banco",
                            EntityStatus = 0,
                            Label = "Pago en banco",
                            Name = "CashOnBank",
                            Order = 1
                        },
                        new
                        {
                            PaymentMethodGroupId = 3,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(4450),
                            Description = "Pago contra entrega",
                            EntityStatus = 0,
                            Label = "Pago contra entrega",
                            Name = "CashOnDelivery",
                            Order = 2
                        },
                        new
                        {
                            PaymentMethodGroupId = 4,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(4450),
                            Description = "Deposito en Banco",
                            EntityStatus = 0,
                            Label = "Deposito en Banco",
                            Name = "BankDeposit",
                            Order = 3
                        },
                        new
                        {
                            PaymentMethodGroupId = 5,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 246, DateTimeKind.Utc).AddTicks(4460),
                            Description = "Confirmación Manual",
                            EntityStatus = 0,
                            Label = "Confirmación Manual",
                            Name = "Manual",
                            Order = 4
                        });
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentMethodTenant", b =>
                {
                    b.Property<int>("PaymentMethodTenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentMethodTenantId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentMethodTenant");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaymentCreditCard")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ProviderId");

                    b.ToTable("Provider");

                    b.HasData(
                        new
                        {
                            ProviderId = 1,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(3460),
                            Description = "VisaNet",
                            EntityStatus = 0,
                            Icon = "visanet",
                            Image = "visanet",
                            Label = "VisaNet",
                            Name = "VisaNet",
                            PaymentCreditCard = true
                        },
                        new
                        {
                            ProviderId = 2,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(3980),
                            Description = "PayU",
                            EntityStatus = 0,
                            Icon = "payu",
                            Image = "payu",
                            Label = "PayU",
                            Name = "PayU",
                            PaymentCreditCard = true
                        },
                        new
                        {
                            ProviderId = 3,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(3990),
                            Description = "Culqi",
                            EntityStatus = 0,
                            Icon = "culqi",
                            Image = "culqi",
                            Label = "Culqi",
                            Name = "Culqi",
                            PaymentCreditCard = true
                        },
                        new
                        {
                            ProviderId = 4,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(3990),
                            Description = "Mercado Pagos",
                            EntityStatus = 0,
                            Icon = "mercadopago",
                            Image = "mercadopago",
                            Label = "Mercado Pagos",
                            Name = "MercadoPago",
                            PaymentCreditCard = true
                        },
                        new
                        {
                            ProviderId = 5,
                            Active = true,
                            CountryIsoCode = "PE",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(3990),
                            Description = "Pago Efectivo",
                            EntityStatus = 0,
                            Icon = "pagoefectivo",
                            Image = "pagoefectivo",
                            Label = "Pago Efectivo",
                            Name = "PagoEfectivo",
                            PaymentCreditCard = false
                        });
                });

            modelBuilder.Entity("Payments.Domain.Entities.ProviderSetting", b =>
                {
                    b.Property<int>("ProviderSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderSettingId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderSetting");

                    b.HasData(
                        new
                        {
                            ProviderSettingId = 1,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(5340),
                            EntityStatus = 0,
                            IsReadOnly = false,
                            Key = "UserName",
                            Label = "Nombre Usuario",
                            ProviderId = 1,
                            Value = ""
                        },
                        new
                        {
                            ProviderSettingId = 2,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7850),
                            EntityStatus = 0,
                            IsReadOnly = false,
                            Key = "Password",
                            Label = "Password",
                            ProviderId = 1,
                            Value = ""
                        },
                        new
                        {
                            ProviderSettingId = 3,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7890),
                            EntityStatus = 0,
                            IsReadOnly = false,
                            Key = "MerchantId",
                            Label = "Merchant Id",
                            ProviderId = 1,
                            Value = ""
                        },
                        new
                        {
                            ProviderSettingId = 4,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "AuthorizeUrl",
                            Label = "Authorize Url",
                            ProviderId = 1,
                            Value = "https://apitestenv.vnforapps.com/api.authorization/v3"
                        },
                        new
                        {
                            ProviderSettingId = 5,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "ConfirmationUrl",
                            Label = "Confirmation Url",
                            ProviderId = 1,
                            Value = "https://apitestenv.vnforapps.com/api.confirmation/v1"
                        },
                        new
                        {
                            ProviderSettingId = 6,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "VoidUrl",
                            Label = "Void Url",
                            ProviderId = 1,
                            Value = "https://apitestenv.vnforapps.com/api.authorization/v3"
                        },
                        new
                        {
                            ProviderSettingId = 7,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "SecurityUrl",
                            Label = "Security Url",
                            ProviderId = 1,
                            Value = "https://apitestenv.vnforapps.com/api.security/v1"
                        },
                        new
                        {
                            ProviderSettingId = 8,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "Channel",
                            Label = "Channel",
                            ProviderId = 1,
                            Value = "web"
                        },
                        new
                        {
                            ProviderSettingId = 9,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "CaptureType",
                            Label = "Capture Type",
                            ProviderId = 1,
                            Value = "manual"
                        },
                        new
                        {
                            ProviderSettingId = 10,
                            CreatedOn = new DateTime(2020, 5, 6, 1, 38, 50, 247, DateTimeKind.Utc).AddTicks(7900),
                            EntityStatus = 0,
                            IsReadOnly = true,
                            Key = "Countable",
                            Label = "Countable",
                            ProviderId = 1,
                            Value = "False"
                        });
                });

            modelBuilder.Entity("Payments.Domain.Entities.ProviderSettingTenant", b =>
                {
                    b.Property<int>("ProviderSettingTenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProviderSettingId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderSettingTenantId");

                    b.HasIndex("ProviderSettingId");

                    b.ToTable("ProviderSettingTenant");
                });

            modelBuilder.Entity("Payments.Domain.Entities.ProviderTenant", b =>
                {
                    b.Property<int>("ProviderTenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ProviderTenantId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderTenant");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cvv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionExternalAuthCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionExternalToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionStatusType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Payments.Domain.Entities.PaymentMethodGroup", "PaymentMethodGroup")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentMethodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentMethodTenant", b =>
                {
                    b.HasOne("Payments.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.ProviderSetting", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Provider", "Provider")
                        .WithMany("ProviderSettings")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.ProviderSettingTenant", b =>
                {
                    b.HasOne("Payments.Domain.Entities.ProviderSetting", "ProviderSetting")
                        .WithMany("ProviderSettingTenants")
                        .HasForeignKey("ProviderSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.ProviderTenant", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Provider", "Provider")
                        .WithMany("Transactions")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
