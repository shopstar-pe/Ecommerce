// <auto-generated />
using System;
using CheckOut.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CheckOut.Persistence.Migrations
{
    [DbContext(typeof(CheckOutDbContext))]
    partial class CheckOutDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CheckOut")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CheckOut.Domain.Entities.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("AppSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 5, 12, 6, 53, 13, 182, DateTimeKind.Utc).AddTicks(3080),
                            EntityStatus = 0,
                            Group = "Application",
                            IsReadOnly = true,
                            Name = "Version",
                            Value = "v1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 5, 12, 6, 53, 13, 182, DateTimeKind.Utc).AddTicks(6270),
                            EntityStatus = 0,
                            Group = "Application",
                            IsReadOnly = true,
                            Name = "Owner",
                            Value = "admin"
                        });
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.Draft", b =>
                {
                    b.Property<string>("DraftId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEntityIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerIdentificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingAddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingIdentificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingLatitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShippingLongitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalShipping")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DraftId");

                    b.ToTable("Draft");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItem", b =>
                {
                    b.Property<string>("DraftItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DraftId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DraftItemId");

                    b.HasIndex("DraftId");

                    b.ToTable("DraftItem");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItemDiscount", b =>
                {
                    b.Property<string>("DraftItemDiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DraftItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsPercentual")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DraftItemDiscountId");

                    b.HasIndex("DraftItemId");

                    b.ToTable("DraftItemDiscount");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItemService", b =>
                {
                    b.Property<string>("DraftItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DraftItemServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SpecialPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DraftItemId", "DraftItemServiceId");

                    b.ToTable("DraftItemService");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItemVariant", b =>
                {
                    b.Property<string>("DraftItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DraftItemVariantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkuId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SpecialPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DraftItemId", "DraftItemVariantId");

                    b.ToTable("DraftItemVariant");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItem", b =>
                {
                    b.HasOne("CheckOut.Domain.Entities.Draft", "Draft")
                        .WithMany("Items")
                        .HasForeignKey("DraftId");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItemDiscount", b =>
                {
                    b.HasOne("CheckOut.Domain.Entities.DraftItem", "DraftItem")
                        .WithMany("Discounts")
                        .HasForeignKey("DraftItemId");
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItemService", b =>
                {
                    b.HasOne("CheckOut.Domain.Entities.DraftItem", "DraftItem")
                        .WithMany("Services")
                        .HasForeignKey("DraftItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckOut.Domain.Entities.DraftItemVariant", b =>
                {
                    b.HasOne("CheckOut.Domain.Entities.DraftItem", "DraftItem")
                        .WithMany("Variants")
                        .HasForeignKey("DraftItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
